"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripAscii = void 0;
const path_1 = __importDefault(require("path"));
const experimental_allure_js_commons_1 = require("experimental-allure-js-commons");
class AllureReporter {
    onBegin(config, suite) {
        this.config = config;
        this.suite = suite;
    }
    onTimeout() {
        this.onEnd();
    }
    async onEnd() {
        const writerForTest = process.env.PW_ALLURE_POST_PROCESSOR_FOR_TEST ? new experimental_allure_js_commons_1.InMemoryAllureWriter() : undefined;
        const resultsDir = process.env.ALLURE_RESULTS_DIR || path_1.default.join(process.cwd(), 'allure-results');
        const runtime = new experimental_allure_js_commons_1.AllureRuntime({ resultsDir, writer: writerForTest });
        const processSuite = (suite, parent) => {
            const groupName = 'Root';
            const group = parent.startGroup(groupName);
            for (const test of suite.tests) {
                for (const result of test.results) {
                    const startTime = result.startTime.getTime();
                    const endTime = startTime + result.duration;
                    const allureTest = group.startTest(test.title, startTime);
                    allureTest.addLabel(experimental_allure_js_commons_1.LabelName.LANGUAGE, 'JavaScript');
                    allureTest.addLabel(experimental_allure_js_commons_1.LabelName.FRAMEWORK, 'Playwright');
                    const [, projectSuiteTitle, fileSuiteTitle, ...suiteTitles] = suite.titlePath();
                    if (projectSuiteTitle)
                        allureTest.addLabel(experimental_allure_js_commons_1.LabelName.PARENT_SUITE, projectSuiteTitle);
                    if (fileSuiteTitle)
                        allureTest.addLabel(experimental_allure_js_commons_1.LabelName.SUITE, fileSuiteTitle);
                    if (suiteTitles.length > 0)
                        allureTest.addLabel(experimental_allure_js_commons_1.LabelName.SUB_SUITE, suiteTitles.join(' > '));
                    allureTest.historyId = test.titlePath().slice(1).join(' ');
                    allureTest.fullName = test.title;
                    allureTest.status = statusToAllureStats(result.status);
                    if (result.error) {
                        const message = result.error.message && stripAscii(result.error.message);
                        let trace = result.error.stack && stripAscii(result.error.stack);
                        if (trace && message && trace.startsWith('Error: ' + message))
                            trace = trace.substr(message.length + 'Error: '.length);
                        allureTest.statusDetails = {
                            message,
                            trace,
                        };
                    }
                    for (const attachment of result.attachments) {
                        let fileName = attachment.path;
                        if (attachment.body)
                            fileName = runtime.writeAttachment(attachment.body, attachment.contentType);
                        allureTest.addAttachment(attachment.name, attachment.contentType, fileName);
                        if (attachment.name === 'diff')
                            allureTest.addLabel('testType', 'screenshotDiff');
                    }
                    for (const stdout of result.stdout)
                        allureTest.addAttachment('stdout', 'text/plain', runtime.writeAttachment(stdout, 'text/plain'));
                    for (const stderr of result.stderr)
                        allureTest.addAttachment('stderr', 'text/plain', runtime.writeAttachment(stderr, 'text/plain'));
                    allureTest.endTest(endTime);
                }
            }
            for (const child of suite.suites)
                processSuite(child, group);
            group.endGroup();
        };
        processSuite(this.suite, runtime);
        if (process.env.PW_ALLURE_POST_PROCESSOR_FOR_TEST) {
            try {
                const postProcess = eval(process.env.PW_ALLURE_POST_PROCESSOR_FOR_TEST);
                console.log(JSON.stringify(postProcess(writerForTest)));
            }
            catch (e) {
                console.log(JSON.stringify({ error: e.toString() }));
            }
        }
    }
}
function statusToAllureStats(status) {
    switch (status) {
        case 'failed':
            return experimental_allure_js_commons_1.Status.FAILED;
        case 'passed':
            return experimental_allure_js_commons_1.Status.PASSED;
        case 'skipped':
            return experimental_allure_js_commons_1.Status.SKIPPED;
        case 'timedOut':
            return experimental_allure_js_commons_1.Status.BROKEN;
    }
}
exports.default = AllureReporter;
const asciiRegex = new RegExp('[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))', 'g');
function stripAscii(str) {
    return str.replace(asciiRegex, '');
}
exports.stripAscii = stripAscii;
//# sourceMappingURL=index.js.map